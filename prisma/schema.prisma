generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Track {
  id        Int        @id @default(autoincrement())
  title     String
  artist    String
  filename  String     @unique
  createdAt DateTime   @default(now())
  album     String?
  imageUrl  String?
  genre       String?
  favorites Favorite[]
  reviews    Review[]
  rating    Float?
}

model User {
  id              Int        @id @default(autoincrement())
  username        String     @unique
  profileImageUrl String?
  password        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  favorites       Favorite[]
  isAdmin         Boolean    @default(false)
  complaints      Complaint[]
  reviews         Review[]
}

model Favorite {
  favoriteId Int      @id @default(autoincrement())
  trackId    Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])

  @@unique([userId, trackId])
}

model Complaint {
  id         Int      @id @default(autoincrement())
  userId     Int
  message    String
  status     String   @default("pending") // Возможные значения: pending, resolved, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}


model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  trackId    Int
  content    String
  rating     Int      // Рейтинг (1-5)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])
}
